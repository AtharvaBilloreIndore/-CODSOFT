TO-DO LIST
TASK 1
A To-Do List application is a useful project that helps users manage
and organize their tasks efficiently. This project aims to create a
command-line or GUI-based application using Python, allowing
users to create, update, and track their to-do lists

import tkinter as tk
from tkinter import messagebox

class ToDoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List App")
        
        self.frame = tk.Frame(self.root)
        self.frame.pack(pady=10)

        self.listbox = tk.Listbox(self.frame, width=50, height=10, selectmode=tk.SINGLE)
        self.listbox.pack(side=tk.LEFT, fill=tk.BOTH)

        self.scrollbar = tk.Scrollbar(self.frame, orient=tk.VERTICAL)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.listbox.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.listbox.yview)

        self.task_entry = tk.Entry(self.root, width=50)
        self.task_entry.pack(pady=20)

        self.add_task_btn = tk.Button(self.root, text="Add Task", command=self.add_task)
        self.add_task_btn.pack(pady=5)

        self.del_task_btn = tk.Button(self.root, text="Delete Selected Task", command=self.delete_task)
        self.del_task_btn.pack(pady=5)

        self.mark_completed_btn = tk.Button(self.root, text="Mark as Completed", command=self.mark_completed)
        self.mark_completed_btn.pack(pady=5)

    def add_task(self):
        task = self.task_entry.get()
        if task != "":
            self.listbox.insert(tk.END, task)
            self.task_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "You must enter a task.")

    def delete_task(self):
        try:
            self.listbox.delete(self.listbox.curselection())
        except:
            messagebox.showwarning("Warning", "You must select a task to delete.")

    def mark_completed(self):
        try:
            # Get the selected task index
            current_selection = self.listbox.curselection()
            # Get the task text
            task = self.listbox.get(current_selection)
            # If not already marked as done, mark it
            if not task.startswith("[Done] "):
                self.listbox.delete(current_selection)
                self.listbox.insert(current_selection, "[Done] " + task)
        except:
            messagebox.showwarning("Warning", "You must select a task to mark as completed.")

if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoApp(root)
    root.mainloop()
